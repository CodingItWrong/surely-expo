{"version":3,"sources":["TimeInput.tsx"],"names":["React","View","TextInput","StyleSheet","useTheme","TouchableRipple","Color","inputTypes","useInputColors","TimeInput","ref","value","clockType","pressed","onPress","onChanged","inputType","rest","controlledValue","setControlledValue","useState","onInnerChange","text","Number","useEffect","theme","inputFocused","setInputFocused","highlighted","picker","color","backgroundColor","formattedValue","length","styles","root","input","borderRadius","roundness","dark","absoluteFill","buttonOverlay","colors","primary","fade","hex","undefined","create","position","height","width","fontSize","textAlign","textAlignVertical","overflow","forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { View, TextInput, TextInputProps, StyleSheet } from 'react-native'\nimport { useTheme, TouchableRipple } from 'react-native-paper'\n\nimport Color from 'color'\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  useInputColors,\n} from './timeUtils'\n\ninterface TimeInputProps\n  extends Omit<Omit<TextInputProps, 'value'>, 'onFocus'> {\n  value: number\n  clockType: PossibleClockTypes\n  onPress?: (type: PossibleClockTypes) => any\n  pressed: boolean\n  onChanged: (n: number) => any\n  inputType: PossibleInputTypes\n}\n\nfunction TimeInput(\n  {\n    value,\n    clockType,\n    pressed,\n    onPress,\n    onChanged,\n    inputType,\n    ...rest\n  }: TimeInputProps,\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    `${value}`\n  )\n\n  const onInnerChange = (text: string) => {\n    setControlledValue(text)\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text))\n    }\n  }\n\n  React.useEffect(() => {\n    setControlledValue(`${value}`)\n  }, [value])\n\n  const theme = useTheme()\n  const [inputFocused, setInputFocused] = React.useState<boolean>(false)\n\n  const highlighted = inputType === inputTypes.picker ? pressed : inputFocused\n\n  const { color, backgroundColor } = useInputColors(highlighted)\n\n  let formattedValue = controlledValue\n  if (!inputFocused) {\n    formattedValue =\n      controlledValue.length === 1\n        ? `0${controlledValue}`\n        : `${controlledValue}`\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        ref={ref}\n        style={[\n          styles.input,\n          {\n            color,\n            backgroundColor,\n            borderRadius: theme.roundness,\n          },\n        ]}\n        value={formattedValue}\n        maxLength={2}\n        onFocus={() => setInputFocused(true)}\n        onBlur={() => setInputFocused(false)}\n        keyboardAppearance={theme.dark ? 'dark' : 'default'}\n        keyboardType=\"number-pad\"\n        onChangeText={onInnerChange}\n        {...rest}\n      />\n      {onPress && inputType === inputTypes.picker ? (\n        <TouchableRipple\n          style={[\n            StyleSheet.absoluteFill,\n            styles.buttonOverlay,\n            {\n              // backgroundColor: 'blue',\n              borderRadius: theme.roundness,\n            },\n          ]}\n          rippleColor={Color(theme.colors.primary).fade(0.7).hex()}\n          onPress={() => onPress(clockType)}\n          borderless={true}\n          // RN types bug\n          hasTVPreferredFocus={undefined}\n          tvParallaxProperties={undefined}\n        >\n          <View />\n        </TouchableRipple>\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: { position: 'relative', height: 80, width: 96 },\n  input: {\n    fontSize: 50,\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96,\n    height: 80,\n  },\n  buttonOverlay: { overflow: 'hidden' },\n})\n\nexport default React.forwardRef(TimeInput)\n"]}