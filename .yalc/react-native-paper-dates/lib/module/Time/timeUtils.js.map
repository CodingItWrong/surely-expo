{"version":3,"sources":["timeUtils.ts"],"names":["React","Color","useTheme","circleSize","hourTypes","am","pm","getHourType","hours","undefined","inputTypes","keyboard","picker","reverseInputTypes","inputTypeIcons","clockTypes","minutes","outerHeight","_30","Math","PI","_12","_360","_90","snap","angle","step","a","diff","getHourTypeFromOffset","left","top","size","w","x","y","distance","sqrt","maxPm","getMinutes","handAngle","minute","parseInt","toFixed","getHours","hourType","hour","getAngle","atan","useSwitchColors","highlighted","theme","backgroundColor","useMemo","dark","colors","primary","hex","backdrop","lighten","surface","color","placeholder","useInputColors","darken","text","toHourInputFormat","is24Hour","toHourOutputFormat","newHours","previousHours"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport Color from 'color'\nimport { useTheme } from 'react-native-paper'\n\n// 250? when bigger?\nexport const circleSize = 215\n\nexport type PossibleHourTypes = 'am' | 'pm'\nexport type HourTypeMap = {\n  [hourType in PossibleHourTypes]: PossibleHourTypes\n}\nexport const hourTypes: HourTypeMap = {\n  am: 'am',\n  pm: 'pm',\n}\n\nexport function getHourType(hours: number): PossibleHourTypes | undefined {\n  if (hours >= 0 && hours <= 12) {\n    return hourTypes.am\n  }\n  if (hours > 12 && hours <= 24) {\n    return hourTypes.pm\n  }\n  return undefined\n}\n\nexport type PossibleInputTypes = 'keyboard' | 'picker'\nexport type InputTypeMap = {\n  [inputType in PossibleInputTypes]: PossibleInputTypes\n}\nexport const inputTypes: InputTypeMap = {\n  keyboard: 'keyboard',\n  picker: 'picker',\n}\n\nexport const reverseInputTypes: InputTypeMap = {\n  keyboard: 'picker',\n  picker: 'keyboard',\n}\ntype InputIconMap = {\n  [inputType in PossibleInputTypes]: string\n}\nexport const inputTypeIcons: InputIconMap = {\n  keyboard: 'keyboard-outline',\n  picker: 'clock-outline',\n}\n\nexport type PossibleClockTypes = 'hours' | 'minutes'\nexport type ClockTypeMap = {\n  [clockType in PossibleClockTypes]: PossibleClockTypes\n}\nexport const clockTypes: ClockTypeMap = {\n  minutes: 'minutes',\n  hours: 'hours',\n}\n\n// Code inspiration and copied from: https://github.com/ShaneGH/analogue-time-picker/blob/master/src/utils/angle.ts\n\nconst outerHeight = 34\nconst _30 = Math.PI / 6\nconst _12 = Math.PI / 30\nconst _360 = Math.PI * 2\nconst _90 = Math.PI / 2\n\n/** Snap an angle to a given step. E.g. if angle = 22° and step = 10°, round down to 20° */\nexport function snap(angle: number, step: number) {\n  let a = angle\n  while (a < 0) a += _360\n  let diff = a % step\n\n  if (diff <= step / 2) {\n    return angle - diff\n  }\n\n  return angle - diff + step\n}\n\n// detect am / pm based on offset\nexport function getHourTypeFromOffset(\n  left: number,\n  top: number,\n  size: number\n): PossibleHourTypes {\n  const w = size / 2\n  const x = w - left\n  const y = size / 2 - top\n\n  const distance = Math.sqrt(x * x + y * y)\n  const maxPm = w - outerHeight\n\n  return distance > maxPm ? hourTypes.am : hourTypes.pm\n}\n\n// Calculate the minute from the hand angle\nexport function getMinutes(handAngle: number) {\n  handAngle = snap(handAngle, _12)\n\n  let minute = parseInt((((handAngle - _90) % _360) / _12).toFixed(), 10)\n  while (minute < 0) minute += 60\n  while (minute >= 60) minute -= 60\n\n  return minute\n}\n\n// Calculate the hour from the hand angle\nexport function getHours(\n  handAngle: number,\n  hourType: PossibleHourTypes | undefined\n) {\n  handAngle = snap(handAngle, _30)\n\n  let hour = parseInt((((handAngle - _90) % _360) / _30).toFixed(), 10)\n  if (hour < 0) hour += 12\n  if (hour >= 12) hour -= 12\n\n  if (hourType === hourTypes.am) {\n    if (hour <= 0) {\n      hour += 12\n    } else if (hour >= 12) {\n      hour -= 12\n    }\n  }\n  if (hourType === hourTypes.pm) {\n    if (hour <= 0) {\n      hour += 12\n    } else if (hour > 12) {\n      hour -= 12\n    }\n  }\n\n  return hour\n}\n\n/** Get the angle of the left/top co-ordinate from the center of the width.height box */\nexport function getAngle(left: number, top: number, size: number) {\n  const x = size / 2 - left\n  const y = size / 2 - top\n\n  // tan O = y / x\n  let angle = x ? Math.atan(y / x) : y < 0 ? -_90 : _90\n  if (x < 0) {\n    // reflect along vertical axis\n    angle = -angle + 2 * (_90 + angle)\n  }\n\n  return angle\n}\n\nexport function useSwitchColors(highlighted: boolean) {\n  const theme = useTheme()\n  const backgroundColor = React.useMemo<string>(() => {\n    if (theme.dark) {\n      if (highlighted) {\n        return Color(theme.colors.primary).hex()\n      }\n      return theme.colors.backdrop\n    }\n\n    if (highlighted) {\n      return Color(theme.colors.primary).lighten(1).hex()\n    }\n    return theme.colors.surface\n  }, [highlighted, theme])\n\n  const color = React.useMemo<string>(() => {\n    if (highlighted && !theme.dark) {\n      return theme.colors.primary\n    }\n    return theme.colors.placeholder\n  }, [highlighted, theme])\n\n  return { backgroundColor, color }\n}\n\nexport function useInputColors(highlighted: boolean) {\n  const theme = useTheme()\n  const backgroundColor = React.useMemo<string>(() => {\n    if (theme.dark) {\n      if (highlighted) {\n        return Color(theme.colors.primary).hex()\n      }\n      return Color(theme.colors.surface).lighten(1.2).hex()\n    }\n\n    if (highlighted) {\n      return Color(theme.colors.primary).lighten(1).hex()\n    }\n    return Color(theme.colors.surface).darken(0.1).hex()\n  }, [highlighted, theme])\n\n  const color = React.useMemo<string>(() => {\n    if (highlighted && !theme.dark) {\n      return theme.colors.primary\n    }\n    return theme.colors.text\n  }, [highlighted, theme])\n\n  return { backgroundColor, color }\n}\n\nexport function toHourInputFormat(hours: number, is24Hour: boolean): number {\n  if (hours === 24) {\n    return 0\n  }\n  if (is24Hour) {\n    return hours\n  }\n  if (hours > 12) {\n    return hours - 12\n  }\n  return hours\n}\n\nexport function toHourOutputFormat(\n  newHours: number,\n  previousHours: number,\n  is24Hour: boolean\n): number {\n  if (is24Hour) {\n    return newHours\n  }\n  if (previousHours > 12 && newHours < 12) {\n    return newHours + 12\n  }\n  return newHours\n}\n"]}