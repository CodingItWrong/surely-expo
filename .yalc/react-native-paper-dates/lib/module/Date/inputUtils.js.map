{"version":3,"sources":["inputUtils.ts"],"names":["useInputFormat","useInputFormatter","useRangeChecker","React","getTranslation","useDateInput","locale","value","validRange","inputMode","onChange","isDisabled","isWithinValidRange","validStart","validEnd","error","setError","useState","formatter","inputFormat","formattedValue","format","onChangeText","date","dayIndex","indexOf","monthIndex","yearIndex","day","Number","slice","year","month","isNaN","finalDate","Date","errors","filter","n","join"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,iBAAzB,EAA4CC,eAA5C,QAAmE,aAAnE;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,eAAe,SAASC,YAAT,OAYZ;AAAA,MAZkC;AACnCC,IAAAA,MADmC;AAEnCC,IAAAA,KAFmC;AAGnCC,IAAAA,UAHmC;AAInCC,IAAAA,SAJmC;AAKnCC,IAAAA;AALmC,GAYlC;AACD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,kBAAd;AAAkCC,IAAAA,UAAlC;AAA8CC,IAAAA;AAA9C,MACJZ,eAAe,CAACM,UAAD,CADjB;AAEA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBb,KAAK,CAACc,QAAN,CAA8B,IAA9B,CAA1B;AACA,QAAMC,SAAS,GAAGjB,iBAAiB,CAAC;AAAEK,IAAAA;AAAF,GAAD,CAAnC;AACA,QAAMa,WAAW,GAAGnB,cAAc,CAAC;AAAEkB,IAAAA;AAAF,GAAD,CAAlC;AACA,QAAME,cAAc,GAAGF,SAAS,CAACG,MAAV,CAAiBd,KAAjB,CAAvB;;AACA,QAAMe,YAAY,GAAIC,IAAD,IAAkB;AACrC,UAAMC,QAAQ,GAAGL,WAAW,CAACM,OAAZ,CAAoB,IAApB,CAAjB;AACA,UAAMC,UAAU,GAAGP,WAAW,CAACM,OAAZ,CAAoB,IAApB,CAAnB;AACA,UAAME,SAAS,GAAGR,WAAW,CAACM,OAAZ,CAAoB,MAApB,CAAlB;AAEA,UAAMG,GAAG,GAAGC,MAAM,CAACN,IAAI,CAACO,KAAL,CAAWN,QAAX,EAAqBA,QAAQ,GAAG,CAAhC,CAAD,CAAlB;AACA,UAAMO,IAAI,GAAGF,MAAM,CAACN,IAAI,CAACO,KAAL,CAAWH,SAAX,EAAsBA,SAAS,GAAG,CAAlC,CAAD,CAAnB;AACA,UAAMK,KAAK,GAAGH,MAAM,CAACN,IAAI,CAACO,KAAL,CAAWJ,UAAX,EAAuBA,UAAU,GAAG,CAApC,CAAD,CAApB;;AAEA,QAAIG,MAAM,CAACI,KAAP,CAAaL,GAAb,KAAqBC,MAAM,CAACI,KAAP,CAAaF,IAAb,CAArB,IAA2CF,MAAM,CAACI,KAAP,CAAaD,KAAb,CAA/C,EAAoE;AAClEhB,MAAAA,QAAQ,CACNZ,cAAc,CACZE,MADY,EAEZ,0BAFY,EAGZ,MAAM,0BAHM,CAAd,CAIEa,WAJF,CADM,CAAR;AAOA;AACD;;AAED,UAAMe,SAAS,GACbzB,SAAS,KAAK,KAAd,GACI,IAAI0B,IAAJ,CAASJ,IAAT,EAAeC,KAAK,GAAG,CAAvB,EAA0BJ,GAA1B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,CADJ,GAEI,IAAIO,IAAJ,CAASJ,IAAT,EAAeC,KAAK,GAAG,CAAvB,EAA0BJ,GAA1B,CAHN;;AAKA,QAAIjB,UAAU,CAACuB,SAAD,CAAd,EAA2B;AACzBlB,MAAAA,QAAQ,CAACZ,cAAc,CAACE,MAAD,EAAS,gBAAT,CAAf,CAAR;AACA;AACD;;AACD,QAAI,CAACM,kBAAkB,CAACsB,SAAD,CAAvB,EAAoC;AAClC,UAAIE,MAAM,GACRvB,UAAU,IAAIC,QAAd,GACI,CACG,GAAEV,cAAc,CAACE,MAAD,EAAS,eAAT,CAA0B,IAAGY,SAAS,CAACG,MAAV,CAC5CR,UAD4C,CAE5C,MAAKK,SAAS,CAACG,MAAV,CAAiBP,QAAjB,CAA2B,EAHpC,CADJ,GAMI,CACED,UAAU,GACL,GAAET,cAAc,CACfE,MADe,EAEf,kBAFe,CAGf,IAAGY,SAAS,CAACG,MAAV,CAAiBR,UAAjB,CAA6B,EAJ5B,GAKN,EANN,EAOEC,QAAQ,GACH,GAAEV,cAAc,CACfE,MADe,EAEf,iBAFe,CAGf,IAAGY,SAAS,CAACG,MAAV,CAAiBP,QAAjB,CAA2B,EAJ5B,GAKJ,EAZN,CAPN;AAqBAE,MAAAA,QAAQ,CAACoB,MAAM,CAACC,MAAP,CAAeC,CAAD,IAAOA,CAArB,EAAwBC,IAAxB,CAA6B,GAA7B,CAAD,CAAR;AACA;AACD;;AAEDvB,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAIP,SAAS,KAAK,KAAlB,EAAyB;AACvBC,MAAAA,QAAQ,CAACwB,SAAD,CAAR;AACD,KAFD,MAEO;AACLxB,MAAAA,QAAQ,CAACwB,SAAD,CAAR;AACD;AACF,GA7DD;;AA8DA,SAAO;AACLxB,IAAAA,QADK;AAELK,IAAAA,KAFK;AAGLK,IAAAA,cAHK;AAILE,IAAAA,YAJK;AAKLH,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import { useInputFormat, useInputFormatter, useRangeChecker } from './dateUtils'\nimport * as React from 'react'\nimport type { ValidRangeType } from './Calendar'\nimport { getTranslation } from 'react-native-paper-dates'\n\nexport default function useDateInput({\n  locale,\n  value,\n  validRange,\n  inputMode,\n  onChange,\n}: {\n  onChange: (d: Date) => void\n  locale: undefined | string\n  value: Date | undefined\n  validRange: ValidRangeType | undefined\n  inputMode: 'start' | 'end'\n}) {\n  const { isDisabled, isWithinValidRange, validStart, validEnd } =\n    useRangeChecker(validRange)\n  const [error, setError] = React.useState<null | string>(null)\n  const formatter = useInputFormatter({ locale })\n  const inputFormat = useInputFormat({ formatter })\n  const formattedValue = formatter.format(value)\n  const onChangeText = (date: string) => {\n    const dayIndex = inputFormat.indexOf('DD')\n    const monthIndex = inputFormat.indexOf('MM')\n    const yearIndex = inputFormat.indexOf('YYYY')\n\n    const day = Number(date.slice(dayIndex, dayIndex + 2))\n    const year = Number(date.slice(yearIndex, yearIndex + 4))\n    const month = Number(date.slice(monthIndex, monthIndex + 2))\n\n    if (Number.isNaN(day) || Number.isNaN(year) || Number.isNaN(month)) {\n      setError(\n        getTranslation(\n          locale,\n          'notAccordingToDateFormat',\n          () => 'notAccordingToDateFormat'\n        )(inputFormat)\n      )\n      return\n    }\n\n    const finalDate =\n      inputMode === 'end'\n        ? new Date(year, month - 1, day, 23, 59, 59)\n        : new Date(year, month - 1, day)\n\n    if (isDisabled(finalDate)) {\n      setError(getTranslation(locale, 'dateIsDisabled'))\n      return\n    }\n    if (!isWithinValidRange(finalDate)) {\n      let errors =\n        validStart && validEnd\n          ? [\n              `${getTranslation(locale, 'mustBeBetween')} ${formatter.format(\n                validStart\n              )} - ${formatter.format(validEnd)}`,\n            ]\n          : [\n              validStart\n                ? `${getTranslation(\n                    locale,\n                    'mustBeHigherThan'\n                  )} ${formatter.format(validStart)}`\n                : '',\n              validEnd\n                ? `${getTranslation(\n                    locale,\n                    'mustBeLowerThan'\n                  )} ${formatter.format(validEnd)}`\n                : '',\n            ]\n      setError(errors.filter((n) => n).join(' '))\n      return\n    }\n\n    setError(null)\n    if (inputMode === 'end') {\n      onChange(finalDate)\n    } else {\n      onChange(finalDate)\n    }\n  }\n  return {\n    onChange,\n    error,\n    formattedValue,\n    onChangeText,\n    inputFormat,\n  }\n}\n"]}