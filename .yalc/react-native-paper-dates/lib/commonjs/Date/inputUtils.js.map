{"version":3,"sources":["inputUtils.ts"],"names":["useDateInput","locale","value","validRange","inputMode","onChange","isDisabled","isWithinValidRange","validStart","validEnd","error","setError","React","useState","formatter","inputFormat","formattedValue","format","onChangeText","date","dayIndex","indexOf","monthIndex","yearIndex","day","Number","slice","year","month","isNaN","finalDate","Date","errors","filter","n","join"],"mappings":"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","sourcesContent":["import { useInputFormat, useInputFormatter, useRangeChecker } from './dateUtils'\nimport * as React from 'react'\nimport type { ValidRangeType } from './Calendar'\nimport { getTranslation } from 'react-native-paper-dates'\n\nexport default function useDateInput({\n  locale,\n  value,\n  validRange,\n  inputMode,\n  onChange,\n}: {\n  onChange: (d: Date) => void\n  locale: undefined | string\n  value: Date | undefined\n  validRange: ValidRangeType | undefined\n  inputMode: 'start' | 'end'\n}) {\n  const { isDisabled, isWithinValidRange, validStart, validEnd } =\n    useRangeChecker(validRange)\n  const [error, setError] = React.useState<null | string>(null)\n  const formatter = useInputFormatter({ locale })\n  const inputFormat = useInputFormat({ formatter })\n  const formattedValue = formatter.format(value)\n  const onChangeText = (date: string) => {\n    const dayIndex = inputFormat.indexOf('DD')\n    const monthIndex = inputFormat.indexOf('MM')\n    const yearIndex = inputFormat.indexOf('YYYY')\n\n    const day = Number(date.slice(dayIndex, dayIndex + 2))\n    const year = Number(date.slice(yearIndex, yearIndex + 4))\n    const month = Number(date.slice(monthIndex, monthIndex + 2))\n\n    if (Number.isNaN(day) || Number.isNaN(year) || Number.isNaN(month)) {\n      setError(\n        getTranslation(\n          locale,\n          'notAccordingToDateFormat',\n          () => 'notAccordingToDateFormat'\n        )(inputFormat)\n      )\n      return\n    }\n\n    const finalDate =\n      inputMode === 'end'\n        ? new Date(year, month - 1, day, 23, 59, 59)\n        : new Date(year, month - 1, day)\n\n    if (isDisabled(finalDate)) {\n      setError(getTranslation(locale, 'dateIsDisabled'))\n      return\n    }\n    if (!isWithinValidRange(finalDate)) {\n      let errors =\n        validStart && validEnd\n          ? [\n              `${getTranslation(locale, 'mustBeBetween')} ${formatter.format(\n                validStart\n              )} - ${formatter.format(validEnd)}`,\n            ]\n          : [\n              validStart\n                ? `${getTranslation(\n                    locale,\n                    'mustBeHigherThan'\n                  )} ${formatter.format(validStart)}`\n                : '',\n              validEnd\n                ? `${getTranslation(\n                    locale,\n                    'mustBeLowerThan'\n                  )} ${formatter.format(validEnd)}`\n                : '',\n            ]\n      setError(errors.filter((n) => n).join(' '))\n      return\n    }\n\n    setError(null)\n    if (inputMode === 'end') {\n      onChange(finalDate)\n    } else {\n      onChange(finalDate)\n    }\n  }\n  return {\n    onChange,\n    error,\n    formattedValue,\n    onChangeText,\n    inputFormat,\n  }\n}\n"]}