{"version":3,"sources":["Calendar.tsx"],"names":["Calendar","props","locale","mode","onChange","startDate","endDate","date","disableWeekDays","dates","validRange","dateMode","theme","selectColor","dark","colors","primary","hex","scrollMode","selectedYear","setSelectedYear","React","useState","undefined","selectingYear","setSelectingYear","onPressYear","year","prev","startDateRef","endDateRef","onChangeRef","datesRef","onPressDate","d","current","sd","ed","isStart","exists","some","newDates","filter","sort","a","b","getTime","datePressed","change","firstDate","styles","root","index","roundness","onPrev","onNext","StyleSheet","create","flex","viewPager","memo"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport Swiper from './Swiper'\nimport Month from './Month'\nimport {\n  areDatesOnSameDay,\n  dateToUnix,\n  DisableWeekDaysType,\n  getEndOfDay,\n  getInitialIndex,\n} from './dateUtils'\n\nimport CalendarHeader from './CalendarHeader'\nimport { useCallback, useMemo } from 'react'\nimport YearPicker from './YearPicker'\nimport Color from 'color'\nimport { useTheme } from 'react-native-paper'\nimport { useLatest, lightenBy, darkenBy } from '../utils'\n\nexport type ModeType = 'single' | 'range' | 'multiple'\n\nexport type ScrollModeType = 'horizontal' | 'vertical'\n\nexport type ValidRangeType = {\n  startDate?: Date\n  endDate?: Date\n  disabledDates?: Date[]\n}\n\nexport type BaseCalendarProps = {\n  locale: string\n  disableWeekDays?: DisableWeekDaysType\n  validRange?: ValidRangeType\n\n  // here they are optional but in final implemenation they are required\n  date?: CalendarDate\n  dates?: CalendarDates\n  startDate?: CalendarDate\n  endDate?: CalendarDate\n  dateMode?: 'start' | 'end'\n}\n\nexport type CalendarDate = Date | undefined\nexport type CalendarDates = Date[] | undefined | null\n\nexport type RangeChange = (params: {\n  startDate: CalendarDate\n  endDate: CalendarDate\n}) => any\n\nexport type SingleChange = (params: { date: CalendarDate }) => void\n\nexport type MultiChange = (params: {\n  dates: CalendarDates\n  datePressed: Date\n  change: 'added' | 'removed'\n}) => any\n\nexport type MultiConfirm = (params: { dates: Date[] }) => void\n\nexport interface CalendarSingleProps extends BaseCalendarProps {\n  mode: 'single'\n  date: CalendarDate\n  onChange: SingleChange\n}\n\nexport interface CalendarRangeProps extends BaseCalendarProps {\n  mode: 'range'\n  startDate: CalendarDate\n  endDate: CalendarDate\n  onChange: RangeChange\n}\n\nexport interface CalendarMultiProps extends BaseCalendarProps {\n  mode: 'multiple'\n  dates: CalendarDates\n  onChange: MultiChange\n}\n\nfunction Calendar(\n  props: CalendarSingleProps | CalendarRangeProps | CalendarMultiProps\n) {\n  const {\n    locale,\n    mode,\n    onChange,\n    startDate,\n    endDate,\n    date,\n    disableWeekDays,\n    dates,\n    validRange,\n    dateMode,\n  } = props\n\n  const theme = useTheme()\n\n  const selectColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return darkenBy(Color(theme.colors.primary), 0.9).hex()\n    }\n    return lightenBy(Color(theme.colors.primary), 0.9).hex()\n  }, [theme])\n\n  const scrollMode =\n    mode === 'range' || mode === 'multiple' ? 'vertical' : 'horizontal'\n\n  const [selectedYear, setSelectedYear] = React.useState<number | undefined>(\n    undefined\n  )\n  const [selectingYear, setSelectingYear] = React.useState<boolean>(false)\n  const onPressYear = useCallback(\n    (year: number) => {\n      setSelectedYear(year)\n      setSelectingYear((prev) => !prev)\n    },\n    [setSelectingYear]\n  )\n\n  // prevent re-rendering all months when something changed we only need the\n  // latest version of the props and we don't want the useCallback to change\n  const startDateRef = useLatest<CalendarDate>(startDate)\n  const endDateRef = useLatest<CalendarDate>(endDate)\n  const onChangeRef = useLatest<RangeChange | SingleChange | MultiChange>(\n    onChange\n  )\n  const datesRef = useLatest<CalendarDates>(dates)\n\n  const onPressDate = useCallback(\n    (d: Date) => {\n      if (mode === 'single') {\n        ;(onChangeRef.current as SingleChange)({\n          date: dateMode === 'start' ? d : getEndOfDay(d),\n        })\n      } else if (mode === 'range') {\n        const sd = startDateRef.current\n        const ed = endDateRef.current\n        let isStart: boolean = true\n        if (sd && !ed && dateToUnix(d) > dateToUnix(sd!)) {\n          isStart = false\n        }\n        ;(onChangeRef.current as RangeChange)({\n          startDate: isStart ? d : sd,\n          endDate: !isStart ? getEndOfDay(d) : undefined,\n        })\n      } else if (mode === 'multiple') {\n        datesRef.current = datesRef.current || []\n        const exists = datesRef.current.some((ed) => areDatesOnSameDay(ed, d))\n\n        const newDates = exists\n          ? datesRef.current.filter((ed) => !areDatesOnSameDay(ed, d))\n          : [...datesRef.current, d]\n\n        newDates.sort((a, b) => a.getTime() - b.getTime())\n        ;(onChangeRef.current as MultiChange)({\n          dates: newDates,\n          datePressed: d,\n          change: exists ? 'removed' : 'added',\n        })\n      }\n    },\n    [mode, dateMode, onChangeRef, startDateRef, endDateRef, datesRef]\n  )\n\n  const firstDate = startDate || date || dates?.[0]\n\n  return (\n    <View style={styles.root}>\n      <Swiper\n        initialIndex={getInitialIndex(firstDate)}\n        selectedYear={selectedYear}\n        scrollMode={scrollMode}\n        renderItem={({ index }) => (\n          <Month\n            locale={locale}\n            mode={mode}\n            key={index}\n            validRange={validRange}\n            index={index}\n            startDate={startDate}\n            endDate={endDate}\n            date={date}\n            dates={dates}\n            onPressYear={onPressYear}\n            selectingYear={selectingYear}\n            onPressDate={onPressDate}\n            scrollMode={scrollMode}\n            primaryColor={theme.colors.primary}\n            selectColor={selectColor}\n            roundness={theme.roundness}\n            disableWeekDays={disableWeekDays}\n          />\n        )}\n        renderHeader={({ onPrev, onNext }) => (\n          <CalendarHeader\n            locale={locale}\n            onPrev={onPrev}\n            onNext={onNext}\n            scrollMode={scrollMode}\n            disableWeekDays={disableWeekDays}\n          />\n        )}\n      />\n      {scrollMode === 'horizontal' ? (\n        <YearPicker\n          selectedYear={selectedYear}\n          selectingYear={selectingYear}\n          onPressYear={onPressYear}\n        />\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: { flex: 1 },\n  viewPager: { flex: 1 },\n})\n\nexport default React.memo(Calendar)\n"]}