{"version":3,"sources":["Day.tsx"],"names":["EmptyDayPure","styles","empty","EmptyDay","React","memo","Day","props","day","month","year","selected","inRange","leftCrop","rightCrop","onPressDate","primaryColor","selectColor","isToday","disabled","textColorOnPrimary","theme","onPress","useCallback","Date","borderColor","dark","textColor","undefined","root","button","backgroundColor","color","StyleSheet","create","flex","flexBasis","opacity","justifyContent","alignItems","position","width","daySize","height","overflow","borderRadius","borderWidth","flex1"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { DarkTheme, Text, TouchableRipple } from 'react-native-paper'\nimport { StyleSheet, View } from 'react-native'\nimport DayRange from './DayRange'\nimport { daySize } from './dateUtils'\n\nfunction EmptyDayPure() {\n  return <View style={styles.empty} />\n}\nexport const EmptyDay = React.memo(EmptyDayPure)\n\nfunction Day(props: {\n  theme: typeof DarkTheme\n  textColorOnPrimary: string\n  day: number\n  month: number\n  year: number\n  selected: boolean\n  inRange: boolean\n  leftCrop: boolean\n  rightCrop: boolean\n  primaryColor: string\n  selectColor: string\n  isToday: boolean\n  disabled: boolean\n  onPressDate: (date: Date) => any\n}) {\n  const {\n    day,\n    month,\n    year,\n    selected,\n    inRange,\n    leftCrop,\n    rightCrop,\n    onPressDate,\n    primaryColor,\n    selectColor,\n    isToday,\n    disabled,\n    textColorOnPrimary,\n    theme,\n  } = props\n  // console.log(month, { day })\n  const onPress = React.useCallback(() => {\n    onPressDate(new Date(year, month, day))\n  }, [onPressDate, year, month, day])\n\n  const borderColor =\n    selected || (inRange && theme.dark)\n      ? textColorOnPrimary\n      : theme.dark\n      ? '#fff'\n      : '#000'\n  const textColor =\n    selected || (inRange && theme.dark) ? textColorOnPrimary : undefined\n\n  return (\n    <View style={[styles.root, disabled && styles.disabled]}>\n      <DayRange\n        inRange={inRange}\n        leftCrop={leftCrop}\n        rightCrop={rightCrop}\n        selectColor={selectColor}\n      />\n\n      <TouchableRipple\n        testID={`react-native-paper-dates-day-${year}-${month}-${day}`}\n        disabled={disabled}\n        borderless={true}\n        onPress={disabled ? undefined : onPress}\n        style={[\n          styles.button,\n          { backgroundColor: inRange ? selectColor : undefined },\n        ]}\n        accessibilityRole=\"button\"\n        // RN types bug\n        hasTVPreferredFocus={undefined}\n        tvParallaxProperties={undefined}\n      >\n        <View\n          style={[\n            styles.day,\n            isToday ? { borderColor: borderColor } : null,\n            selected ? { backgroundColor: primaryColor } : null,\n          ]}\n        >\n          <Text\n            style={textColor ? { color: textColor } : undefined}\n            selectable={false}\n          >\n            {day}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  empty: {\n    flex: 1,\n    flexBasis: 0,\n  },\n  disabled: {\n    opacity: 0.3,\n  },\n  root: {\n    flexBasis: 0,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'relative',\n  },\n  button: {\n    width: daySize,\n    height: daySize,\n    overflow: 'hidden',\n    borderRadius: daySize / 2,\n  },\n  day: {\n    flexBasis: 0,\n    flex: 1,\n    borderRadius: daySize / 2,\n    width: daySize,\n    height: daySize,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: 'transparent',\n  },\n  flex1: {\n    flex: 1,\n  },\n})\n\nexport default React.memo(Day)\n"]}