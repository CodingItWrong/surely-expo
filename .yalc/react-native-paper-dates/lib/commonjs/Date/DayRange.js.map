{"version":3,"sources":["DayRange.tsx"],"names":["DayRange","leftCrop","rightCrop","inRange","selectColor","bothWays","isCrop","StyleSheet","absoluteFill","styles","rangeRoot","rangeRootBoth","backgroundColor","flex1","minWidth","daySize","minHeight","leftRadius","rightRadius","create","borderBottomLeftRadius","borderTopLeftRadius","borderBottomRightRadius","borderTopRightRadius","borderRadius","flex","flexDirection","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,SAASA,QAAT,OAUG;AAAA,MAVe;AAChBC,IAAAA,QADgB;AAEhBC,IAAAA,SAFgB;AAGhBC,IAAAA,OAHgB;AAIhBC,IAAAA;AAJgB,GAUf;AACD,QAAMC,QAAQ,GAAGF,OAAO,IAAIF,QAAX,IAAuBC,SAAxC;AACA,QAAMI,MAAM,GAAGH,OAAO,KAAKF,QAAQ,IAAIC,SAAjB,CAAP,IAAsC,EAAED,QAAQ,IAAIC,SAAd,CAArD;;AAEA,MAAIC,OAAO,IAAIG,MAAf,EAAuB;AACrB,wBACE,oBAAC,iBAAD;AACE,MAAA,aAAa,EAAC,MADhB;AAEE,MAAA,KAAK,EAAE,CACLC,wBAAWC,YADN,EAELC,MAAM,CAACC,SAFF,EAGLL,QAAQ,IAAII,MAAM,CAACE,aAHd,EAILR,OAAO,IAAI,CAACG,MAAZ,GACI;AACEM,QAAAA,eAAe,EAAER;AADnB,OADJ,GAII,IARC;AAFT,OAaGE,MAAM,iBACL,uDACE,oBAAC,iBAAD;AACE,MAAA,KAAK,EAAE,CACLG,MAAM,CAACI,KADF,EAELX,SAAS,GACL;AACEU,QAAAA,eAAe,EAAER;AADnB,OADK,GAIL,IANC;AADT,MADF,eAWE,oBAAC,iBAAD;AACE,MAAA,KAAK,EAAE,CACL;AACEQ,QAAAA,eAAe,EAAER,WADnB;AAEEU,QAAAA,QAAQ,EAAEC,kBAFZ;AAGEC,QAAAA,SAAS,EAAED;AAHb,OADK,EAMLd,QAAQ,GAAGQ,MAAM,CAACQ,UAAV,GAAuB,IAN1B,EAOLf,SAAS,GAAGO,MAAM,CAACS,WAAV,GAAwB,IAP5B;AADT,MAXF,eAsBE,oBAAC,iBAAD;AACE,MAAA,KAAK,EAAE,CACLT,MAAM,CAACI,KADF,EAELZ,QAAQ,GACJ;AACEW,QAAAA,eAAe,EAAER;AADnB,OADI,GAIJ,IANC;AADT,MAtBF,CAdJ,CADF;AAmDD;;AACD,SAAO,IAAP;AACD;;AAED,MAAMK,MAAM,GAAGF,wBAAWY,MAAX,CAAkB;AAC/BF,EAAAA,UAAU,EAAE;AACVG,IAAAA,sBAAsB,EAAEL,qBAAU,CADxB;AAEVM,IAAAA,mBAAmB,EAAEN,qBAAU;AAFrB,GADmB;AAK/BG,EAAAA,WAAW,EAAE;AACXI,IAAAA,uBAAuB,EAAEP,qBAAU,CADxB;AAEXQ,IAAAA,oBAAoB,EAAER,qBAAU;AAFrB,GALkB;AAS/BJ,EAAAA,aAAa,EAAE;AACba,IAAAA,YAAY,EAAET,qBAAU;AADX,GATgB;AAY/BF,EAAAA,KAAK,EAAE;AACLY,IAAAA,IAAI,EAAE;AADD,GAZwB;AAe/Bf,EAAAA,SAAS,EAAE;AACTgB,IAAAA,aAAa,EAAE;AADN;AAfoB,CAAlB,CAAf;;4BAoBeC,KAAK,CAACC,IAAN,CAAW5B,QAAX,C","sourcesContent":["import * as React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { daySize } from './dateUtils'\n\nfunction DayRange({\n  leftCrop,\n  rightCrop,\n  inRange,\n  selectColor,\n}: {\n  leftCrop: boolean\n  rightCrop: boolean\n  inRange: boolean\n  selectColor: string\n}) {\n  const bothWays = inRange && leftCrop && rightCrop\n  const isCrop = inRange && (leftCrop || rightCrop) && !(leftCrop && rightCrop)\n\n  if (inRange || isCrop) {\n    return (\n      <View\n        pointerEvents=\"none\"\n        style={[\n          StyleSheet.absoluteFill,\n          styles.rangeRoot,\n          bothWays && styles.rangeRootBoth,\n          inRange && !isCrop\n            ? {\n                backgroundColor: selectColor,\n              }\n            : null,\n        ]}\n      >\n        {isCrop && (\n          <>\n            <View\n              style={[\n                styles.flex1,\n                rightCrop\n                  ? {\n                      backgroundColor: selectColor,\n                    }\n                  : null,\n              ]}\n            />\n            <View\n              style={[\n                {\n                  backgroundColor: selectColor,\n                  minWidth: daySize,\n                  minHeight: daySize,\n                },\n                leftCrop ? styles.leftRadius : null,\n                rightCrop ? styles.rightRadius : null,\n              ]}\n            />\n            <View\n              style={[\n                styles.flex1,\n                leftCrop\n                  ? {\n                      backgroundColor: selectColor,\n                    }\n                  : null,\n              ]}\n            />\n          </>\n        )}\n      </View>\n    )\n  }\n  return null\n}\n\nconst styles = StyleSheet.create({\n  leftRadius: {\n    borderBottomLeftRadius: daySize / 2,\n    borderTopLeftRadius: daySize / 2,\n  },\n  rightRadius: {\n    borderBottomRightRadius: daySize / 2,\n    borderTopRightRadius: daySize / 2,\n  },\n  rangeRootBoth: {\n    borderRadius: daySize / 2,\n  },\n  flex1: {\n    flex: 1,\n  },\n  rangeRoot: {\n    flexDirection: 'row',\n  },\n})\n\nexport default React.memo(DayRange)\n"]}