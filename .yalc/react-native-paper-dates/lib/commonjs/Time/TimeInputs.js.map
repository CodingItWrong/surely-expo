{"version":3,"sources":["TimeInputs.tsx"],"names":["TimeInputs","hours","minutes","onFocusInput","focused","inputType","onChange","is24Hour","startInput","React","useRef","endInput","dimensions","isLandscape","width","height","theme","onSubmitStartInput","useCallback","current","focus","onSubmitEndInput","minutesRef","onChangeHours","newHours","clockTypes","styles","inputContainer","inputContainerLandscape","newHoursFromInput","hoursAndMinutesSeparator","spaceDot","dot","backgroundColor","colors","text","betweenDot","newMinutesFromInput","newMinutes","spaceBetweenInputsAndSwitcher","StyleSheet","create","flexDirection","alignItems","flex","fontSize","borderRadius","memo"],"mappings":"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","sourcesContent":["// @typescript-eslint/no-unused-vars\n// WORK IN PROGRESS\n\nimport * as React from 'react'\nimport {\n  View,\n  StyleSheet,\n  useWindowDimensions,\n  TextInput as TextInputNative,\n} from 'react-native'\nimport { useTheme } from 'react-native-paper'\n\nimport {\n  clockTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\nimport TimeInput from './TimeInput'\nimport AmPmSwitcher from './AmPmSwitcher'\nimport { useLatest } from '../utils'\n\nfunction TimeInputs({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  is24Hour,\n}: {\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: (hoursMinutesAndFocused: {\n    hours: number\n    minutes: number\n    focused?: undefined | PossibleClockTypes\n  }) => any\n  is24Hour: boolean\n}) {\n  const startInput = React.useRef<TextInputNative | null>(null)\n  const endInput = React.useRef<TextInputNative | null>(null)\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n  const theme = useTheme()\n\n  const onSubmitStartInput = React.useCallback(() => {\n    if (endInput.current) {\n      endInput.current.focus()\n    }\n  }, [endInput])\n\n  const onSubmitEndInput = React.useCallback(() => {\n    // TODO: close modal and persist time\n  }, [])\n\n  const minutesRef = useLatest(minutes)\n  const onChangeHours = React.useCallback(\n    (newHours: number) => {\n      onChange({\n        hours: newHours,\n        minutes: minutesRef.current,\n        focused: clockTypes.hours,\n      })\n    },\n    [onChange, minutesRef]\n  )\n\n  return (\n    <View\n      style={[\n        styles.inputContainer,\n        isLandscape && styles.inputContainerLandscape,\n      ]}\n    >\n      <TimeInput\n        ref={startInput}\n        placeholder={'00'}\n        value={toHourInputFormat(hours, is24Hour)}\n        clockType={clockTypes.hours}\n        pressed={focused === clockTypes.hours}\n        onPress={onFocusInput}\n        inputType={inputType}\n        returnKeyType={'next'}\n        onSubmitEditing={onSubmitStartInput}\n        blurOnSubmit={false}\n        onChanged={(newHoursFromInput) => {\n          let newHours = toHourOutputFormat(newHoursFromInput, hours, is24Hour)\n          if (newHoursFromInput > 24) {\n            newHours = 24\n          }\n          onChange({\n            hours: newHours,\n            minutes,\n          })\n        }}\n        // onChangeText={onChangeStartInput}\n      />\n      <View style={styles.hoursAndMinutesSeparator}>\n        <View style={styles.spaceDot} />\n        <View style={[styles.dot, { backgroundColor: theme.colors.text }]} />\n        <View style={styles.betweenDot} />\n        <View style={[styles.dot, { backgroundColor: theme.colors.text }]} />\n        <View style={styles.spaceDot} />\n      </View>\n      <TimeInput\n        ref={endInput}\n        placeholder={'00'}\n        value={minutes}\n        clockType={clockTypes.minutes}\n        pressed={focused === clockTypes.minutes}\n        onPress={onFocusInput}\n        inputType={inputType}\n        onSubmitEditing={onSubmitEndInput}\n        onChanged={(newMinutesFromInput) => {\n          let newMinutes = newMinutesFromInput\n          if (newMinutesFromInput > 60) {\n            newMinutes = 60\n          }\n          onChange({\n            hours,\n            minutes: newMinutes,\n          })\n        }}\n      />\n      {!is24Hour && (\n        <>\n          <View style={styles.spaceBetweenInputsAndSwitcher} />\n          <AmPmSwitcher hours={hours} onChange={onChangeHours} />\n        </>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  spaceBetweenInputsAndSwitcher: { width: 12 },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  inputContainerLandscape: {\n    flex: 1,\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center',\n  },\n  spaceDot: {\n    flex: 1,\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2,\n  },\n  betweenDot: {\n    height: 12,\n  },\n})\n\nexport default React.memo(TimeInputs)\n"]}