{"version":3,"sources":["TimePickerModal.tsx"],"names":["supportedOrientations","TimePickerModal","visible","onDismiss","onConfirm","hours","minutes","label","cancelLabel","confirmLabel","animationType","locale","theme","inputType","setInputType","React","useState","inputTypes","picker","focused","setFocused","clockTypes","localHours","setLocalHours","getHours","localMinutes","setLocalMinutes","getMinutes","useEffect","onFocusInput","useCallback","type","onChange","params","StyleSheet","absoluteFill","styles","modalBackground","backgroundColor","colors","backdrop","modalRoot","keyboardView","modalContent","dark","surface","borderRadius","roundness","labelContainer","color","text","toUpperCase","timePickerContainer","bottom","inputTypeIcons","reverseInputTypes","inputTypeToggle","undefined","fill","Date","create","justifyContent","alignItems","flex","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","minWidth","paddingLeft","paddingRight","letterSpacing","fontSize","padding","flexDirection","margin","memo"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {\n  Modal,\n  StyleSheet,\n  View,\n  Text,\n  Animated,\n  TouchableWithoutFeedback,\n  KeyboardAvoidingView,\n} from 'react-native'\n\nimport { Button, IconButton, overlay, useTheme } from 'react-native-paper'\nimport TimePicker from './TimePicker'\nimport {\n  clockTypes,\n  inputTypeIcons,\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  reverseInputTypes,\n} from './timeUtils'\n\nconst supportedOrientations: any[] = [\n  'portrait',\n  'portrait-upside-down',\n  'landscape',\n  'landscape-left',\n  'landscape-right',\n]\n\nexport function TimePickerModal({\n  visible,\n  onDismiss,\n  onConfirm,\n  hours,\n  minutes,\n  label = 'Select time',\n  cancelLabel = 'Cancel',\n  confirmLabel = 'Ok',\n  animationType = 'none',\n  locale,\n}: {\n  locale?: undefined | string\n  label?: string\n  cancelLabel?: string\n  confirmLabel?: string\n  hours?: number | undefined\n  minutes?: number | undefined\n  visible: boolean | undefined\n  onDismiss: () => any\n  onConfirm: (hoursAndMinutes: { hours: number; minutes: number }) => any\n  animationType?: 'slide' | 'fade' | 'none'\n}) {\n  const theme = useTheme()\n\n  const [inputType, setInputType] = React.useState<PossibleInputTypes>(\n    inputTypes.picker\n  )\n  const [focused, setFocused] = React.useState<PossibleClockTypes>(\n    clockTypes.hours\n  )\n  const [localHours, setLocalHours] = React.useState<number>(getHours(hours))\n  const [localMinutes, setLocalMinutes] = React.useState<number>(\n    getMinutes(minutes)\n  )\n\n  React.useEffect(() => {\n    setLocalHours(getHours(hours))\n  }, [setLocalHours, hours])\n\n  React.useEffect(() => {\n    setLocalMinutes(getMinutes(minutes))\n  }, [setLocalMinutes, minutes])\n\n  const onFocusInput = React.useCallback(\n    (type: PossibleClockTypes) => setFocused(type),\n    []\n  )\n  const onChange = React.useCallback(\n    (params: {\n      focused?: PossibleClockTypes | undefined\n      hours: number\n      minutes: number\n    }) => {\n      if (params.focused) {\n        setFocused(params.focused)\n      }\n\n      setLocalHours(params.hours)\n      setLocalMinutes(params.minutes)\n    },\n    [setFocused, setLocalHours, setLocalMinutes]\n  )\n  return (\n    <Modal\n      animationType={animationType}\n      transparent={true}\n      visible={visible}\n      onRequestClose={onDismiss}\n      presentationStyle=\"overFullScreen\"\n      supportedOrientations={supportedOrientations}\n      //@ts-ignore\n      statusBarTranslucent={true}\n    >\n      <>\n        <TouchableWithoutFeedback onPress={onDismiss}>\n          <View\n            style={[\n              StyleSheet.absoluteFill,\n              styles.modalBackground,\n              { backgroundColor: theme.colors.backdrop },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n\n        <View\n          style={[StyleSheet.absoluteFill, styles.modalRoot]}\n          pointerEvents=\"box-none\"\n        >\n          <KeyboardAvoidingView\n            style={styles.keyboardView}\n            behavior={'padding'}\n          >\n            <Animated.View\n              style={[\n                styles.modalContent,\n                {\n                  backgroundColor: theme.dark\n                    ? overlay(10, theme.colors.surface)\n                    : theme.colors.surface,\n                  borderRadius: theme.roundness,\n                },\n              ]}\n            >\n              <View style={styles.labelContainer}>\n                <Text style={[styles.label, { color: theme.colors.text }]}>\n                  {label.toUpperCase()}\n                </Text>\n              </View>\n              <View style={styles.timePickerContainer}>\n                <TimePicker\n                  locale={locale}\n                  inputType={inputType}\n                  focused={focused}\n                  hours={localHours}\n                  minutes={localMinutes}\n                  onChange={onChange}\n                  onFocusInput={onFocusInput}\n                />\n              </View>\n              <View style={styles.bottom}>\n                <IconButton\n                  icon={inputTypeIcons[reverseInputTypes[inputType]]}\n                  onPress={() => setInputType(reverseInputTypes[inputType])}\n                  size={24}\n                  style={styles.inputTypeToggle}\n                  accessibilityLabel=\"toggle keyboard\"\n                  // RN types bug\n                  hasTVPreferredFocus={undefined}\n                  tvParallaxProperties={undefined}\n                />\n                <View style={styles.fill} />\n                <Button onPress={onDismiss}>{cancelLabel}</Button>\n                <Button\n                  onPress={() =>\n                    onConfirm({ hours: localHours, minutes: localMinutes })\n                  }\n                >\n                  {confirmLabel}\n                </Button>\n              </View>\n            </Animated.View>\n          </KeyboardAvoidingView>\n        </View>\n      </>\n    </Modal>\n  )\n}\n\nfunction getMinutes(minutes: number | undefined | null): number {\n  return minutes === undefined || minutes === null\n    ? new Date().getMinutes()\n    : minutes\n}\nfunction getHours(hours: number | undefined | null): number {\n  return hours === undefined || hours === null ? new Date().getHours() : hours\n}\n\nconst styles = StyleSheet.create({\n  modalRoot: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  keyboardView: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n  },\n  modalBackground: {\n    flex: 1,\n  },\n  modalContent: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 5,\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    minWidth: 287,\n  },\n  labelContainer: {\n    height: 28,\n    justifyContent: 'flex-end',\n    paddingLeft: 24,\n    paddingRight: 24,\n  },\n  label: {\n    letterSpacing: 1,\n    fontSize: 13,\n  },\n  timePickerContainer: { padding: 24 },\n  bottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  inputTypeToggle: { margin: 4 },\n  fill: { flex: 1 },\n})\n\nexport default React.memo(TimePickerModal)\n"]}